# -*- coding: utf-8 -*-
"""Time Series

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1QnX5Ckoez0yuH3p0IiZX0BpgXmKRMgfF

# <font color = green>Aula 1 - Tendência das Vendas

## <font color = blackpink>Análise Das Vendas
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import seaborn as sns
# %matplotlib inline
import matplotlib.pyplot as plt

pd.read_csv('alucar.csv').head()

alucar = pd.read_csv('alucar.csv')

print(f'quantidade de linhas e colunas: {alucar.shape}')

print(f'Quantidade de dados nulos: {alucar.isna().sum().sum()}')

alucar.dtypes

alucar.mes = pd.to_datetime(alucar.mes)

alucar.dtypes

sns.__version__

sns.lineplot(x = 'mes', y = 'vendas', data = alucar)

"""---

## <font color = blackpink>Aperfeiçoando o gráfico
"""

sns.set_palette('Accent')
sns.set_style('darkgrid')
ax = sns.lineplot(x = 'mes', y = 'vendas', data = alucar)
ax.figure.set_size_inches(12, 6)
ax.set_title('Vendas Alucar de 2017 e 2018', loc = 'left', fontsize = 18)
ax.set_xlabel('Meses', fontsize = 14)
ax.set_ylabel('Vendas (R$)', fontsize = 14)
ax = ax

"""---
---

# <font color = green>Aula 2 – Decomposição e Autocorrelação

## <font color = blackpink>Decompondo As Vendas
"""

alucar.head()

alucar['aumento'] = alucar.vendas.diff()
alucar.head()

sns.set_palette('Accent')
sns.set_style('darkgrid')
ax = sns.lineplot(x = 'mes', y = 'aumento', data = alucar)
ax.figure.set_size_inches(12, 6)
ax.set_title('Aumento das Vendas Alucar de 2017 e 2018', loc = 'left', fontsize = 18)
ax.set_xlabel('Meses', fontsize = 14)
ax.set_ylabel('Aumento', fontsize = 14)
ax = ax

def plotar(titulo: str, labelx: str, labely: str, x: str, y: str, dataset):
  sns.set_palette('Accent')
  sns.set_style('darkgrid')
  ax = sns.lineplot(x = x, y = y, data = dataset)
  ax.figure.set_size_inches(12, 6)
  ax.set_title(titulo, loc = 'left', fontsize = 18)
  ax.set_xlabel(labelx, fontsize = 14)
  ax.set_ylabel(labely, fontsize = 14)
  ax = ax

plotar('Aumento das Vendas Alucar de 2017 e 2018', 'Meses', 'Aumento', 'mes', 'aumento', alucar,)

alucar['aceleracao'] = alucar.aumento.diff()
alucar.head()

plotar('Aceleração das Vendas da Alucar de 2017 e 2018', 'Meses', 'Aceleração',
       'mes', 'aceleracao', alucar)

"""---

## <font color = blackpink>Observação e tendência
"""

plt.figure(figsize = (16, 12))      # Seta o tamanho da imagem
ax = plt.subplot(3, 1, 1)     # Atribui o subplot a ax e seta a loc do primeiro gráfico
ax.set_title('Análise de Vendas da Alucar de 2017 e 2018',
             fontsize = 18, loc = 'left')   # Seta título, fonte e localização
sns.lineplot(x = 'mes', y = 'vendas', data = alucar)  # Primeiro Gráfico
plt.subplot(3, 1, 2)      # Localização do segundo gráfico, divide em 3 partes, diz que ocupa a parte toda, diz qual é a parte em que plotará
sns.lineplot(x = 'mes', y = 'aumento', data = alucar) # Segundo Gráfico
plt.subplot(3, 1, 3)                # Localização do terceiro gráfico
sns.lineplot(x = 'mes', y = 'aceleracao', data = alucar)  # Terceiro gráfico
ax = ax

def plot_comparacao(x: str, y1: str, y2: str, y3: str, dataset, titulo: str):
  plt.figure(figsize = (16, 12))
  ax = plt.subplot(3, 1, 1)
  ax.set_title(titulo, fontsize = 18, loc = 'left')
  sns.lineplot(x = x, y = y1, data = dataset)
  plt.subplot(3, 1, 2)
  sns.lineplot(x = x, y = y2, data = dataset)
  plt.subplot(3, 1, 3)
  sns.lineplot(x = x, y = y3, data = dataset)
  ax = ax

plot_comparacao('mes', 'vendas', 'aumento', 'aceleracao', alucar, 'Análise de Vendas da Alucar de 2017 e 2018')

"""---

## <font color = blackpink>Autocorrelação
"""

from pandas.plotting import autocorrelation_plot

ax = plt.figure(figsize=(12,6))
ax.suptitle('Correlação das Vendas', fontsize = 18, x = 0.26, y = 0.95)
autocorrelation_plot(alucar.vendas)
ax = ax

ax = plt.figure(figsize=(12,6))
ax.suptitle('Correlação do Aumento', fontsize = 18, x = 0.26, y = 0.95)
autocorrelation_plot(alucar.aumento)
ax = ax

ax = plt.figure(figsize=(12,6))
ax.suptitle('Correlação do Aumento', fontsize = 18, x = 0.26, y = 0.95)
autocorrelation_plot(alucar.aumento[1:])
ax = ax

ax = plt.figure(figsize=(12,6))
ax.suptitle('Correlação do Aumento', fontsize = 18, x = 0.26, y = 0.95)
autocorrelation_plot(alucar.aceleracao[2:])
ax = ax

"""---
---

# <font color = green>Aula 3 – Importância Da Decomposição e Sazonalidade

## <font color = blackpink>Analisando Assinantes
"""

assinantes = pd.read_csv('newsletter_alucar.csv')

assinantes.head()

assinantes.dtypes

assinantes.mes = pd.to_datetime(assinantes.mes)
assinantes.dtypes

print(f'Quantidade de linhas e colunas: {assinantes.shape}')
print(f'Quantidade de dados nulos: {assinantes.isna().sum().sum()}')

assinantes['aumento'] = assinantes.assinantes.diff()
assinantes['aceleracao'] = assinantes.aumento.diff()

assinantes.head()

plot_comparacao('mes', 'assinantes', 'aumento', 'aceleracao', assinantes, 'Análise de Assinantes da Newsletter')

"""---

## <font color = blackpink> Sazonalidade e Chocolate
"""

choco = pd.read_csv('chocolura.csv')
choco.head()

choco.dtypes

print(f'Quantidade de linhas: {choco.shape}')
print(f'Quantidade de nulos: {choco.isna().sum().sum()}')

choco.mes = pd.to_datetime(choco.mes)
choco.dtypes

choco['aumento'] = choco.vendas.diff()
choco['aceleracao'] = choco.aumento.diff()
choco.head()

plot_comparacao('mes', 'vendas', 'aumento', 'aceleracao', choco, 'Análise de Vendas da Chocolura de 2017 a 2018')

"""---

## <font color = blackpink>Investigando a Sazonalidade
"""

vendas_por_dia = pd.read_csv('vendas_por_dia.csv')
vendas_por_dia.head()

print(f'Quantidade de linhas e colunas: {vendas_por_dia.shape}')
print(f'Quantidade de dados nulos:{vendas_por_dia.isna().sum().sum()}')

vendas_por_dia.dtypes

vendas_por_dia.dia = pd.to_datetime(vendas_por_dia.dia)
vendas_por_dia.dtypes

vendas_por_dia['aumento'] = vendas_por_dia.vendas.diff()
vendas_por_dia['aceleracao'] = vendas_por_dia.aumento.diff()
vendas_por_dia.head()

plot_comparacao('dia', 'vendas', 'aumento', 'aceleracao', vendas_por_dia,
                'Análise de Vendas de Outubro e Novembro -> Chocolura')

vendas_por_dia['dia_da_semana'] = vendas_por_dia.dia.dt.day_name()

vendas_por_dia.head(7)

vendas_por_dia.dia_da_semana.unique()

dias_traduzidos = {'Monday': 'Segunda', 'Tuesday': 'Terça', 'Wednesday': 'Quarta',
                   'Thursday': 'Quinta', 'Friday': 'Sexta', 'Saturday': 'Sábado', 'Sunday': 'Domingo'}

vendas_por_dia.dia_da_semana = vendas_por_dia.dia_da_semana.map(dias_traduzidos)
vendas_por_dia.head(7)

vendas_por_dia.head(14)

vendas_agrupadas = vendas_por_dia.groupby(vendas_por_dia.dia_da_semana).mean().round()
vendas_agrupadas

