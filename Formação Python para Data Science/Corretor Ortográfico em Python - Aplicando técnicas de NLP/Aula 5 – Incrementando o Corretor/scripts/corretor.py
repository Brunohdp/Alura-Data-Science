# -*- coding: utf-8 -*-
"""Corretor

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13NQPcUsZ70fx-y7V5I5CJS7RDCZWSku0

# <font color = green>Aula 1 – Explorando Um Projeto De NLP

## <font color = blackpink>Importando Um Corpus Textual
"""

with open('artigos.txt', 'r') as f:
  artigos = f.read()

print(artigos[:500])

"""---

## <font color = blackpink>Tokenização
"""

len(artigos)

texto_exemplo = 'Olá, tudo bem?'
tokens = texto_exemplo.split()
print(tokens)

len(artigos.split())

"""---
---

# <font color = green>Aula 2 – Utilizando NLTK Para Tokenizar Um Texto

## <font color = blackpink>Refinando a Tokenização
"""

import nltk
nltk.download('punkt')

palavras_separadas = nltk.tokenize.word_tokenize(texto_exemplo)
palavras_separadas

"""---

## <font color = blackpink>Separando Palavras De Tokens
"""

'palavra'.isalpha()

def separa_palavras(lista_tokens: list):
  lista_palavras = []
  for token in lista_tokens:
    if token.isalpha():
      lista_palavras.append(token)
  return lista_palavras

separa_palavras(palavras_separadas)

"""---

## <font color=blackpink>Contando Palavras Do Corpus
"""

lista_tokens = nltk.tokenize.word_tokenize(artigos)
lista_palavras = separa_palavras(lista_tokens)
print(f'O número de palavras é: {len(lista_palavras)}')

"""---

## <font color = blackpink>Normalização
"""

print(lista_palavras[:5])

def normalizacao(lista_palavras: list):
  lista_normalizada = []
  for palavra in lista_palavras:
    lista_normalizada.append(palavra.lower())
  return lista_normalizada

lista_normalizada = normalizacao(lista_palavras)
lista_normalizada[:5]

"""---

## <font color=blackpink>Tipos De Palavras
"""

set([1,1,1,3,4,4,5,8,2,4,5,5,6,6])

lista_unica = set(lista_normalizada)
len(lista_unica)

"""---
---

# <font color=green>Aula 3 – Desenvolvendo e Testando o Corretor

## <font color=blackpink>Fatiando Strings
"""

lista = 'lgica'
(lista[:1],lista[1:])

palavra_exemplo = 'lgica'

def gerador_palavras(palavra):
  fatias = []
  for i in range(len(palavra) + 1):
    fatias.append((lista[:i],lista[i:]))
  print(fatias)
  # palavras_geradas = insere_letras(fatias)
  # return palavras_geradas

gerador_palavras(palavra_exemplo)

"""---

## <font color=blackpink>Operação De Inserção
"""

palavra_exemplo = 'lgica'


def insere_letras(fatias):
  novas_palavras = []
  letras = 'abcdefghijklmnopqrstuvwxyzàáâãèéêìíîòóôõùúûç'
  for E, D in fatias:
    for letra in letras:
      novas_palavras.append(E + letra + D)
  return novas_palavras


def gerador_palavras(palavra):
  fatias = []
  for i in range(len(palavra) + 1):
    fatias.append((palavra[:i],palavra[i:]))
  palavras_geradas = insere_letras(fatias)
  return palavras_geradas


palavras_geradas = gerador_palavras(palavra_exemplo)
palavras_geradas

"""---

## <font color=blackpink>Construindo a Função Corretor
"""

def corretor(palavra):
  palavras_geradas = gerador_palavras(palavra)
  palavra_correta = max(palavras_geradas, key = probabilidade)
  return palavra_correta

# Meu método kkk

for palavra in palavras_geradas:
  for pal in lista_unica:
    if palavra == pal:
      print(palavra)

"""---

## <font color=blackpink>Probabilidade Das Palavras Geradas
"""

frequencia = nltk.FreqDist(lista_normalizada)
total_palavras = len(lista_normalizada)
frequencia.most_common(10)

frequencia["lógica"]

def probabilidade(palavras_geradas):
  return frequencia[palavras_geradas]/total_palavras

probabilidade('logica')

corretor('lgica')

"""---
---

# <font color=green>Aula 4 – Avaliando a Qualidade do Corretor

## <font color=blackpink>Preparando Dados de Teste
"""

def cria_dados_teste(nome_arquivo):
  lista_palavras_teste = []
  f = open(nome_arquivo, 'r')
  for linha in f:
    correta, errada = linha.split()
    lista_palavras_teste.append((correta, errada))
  f.close()
  return lista_palavras_teste

lista_teste = cria_dados_teste('palavras.txt')

"""---

## <font color=blackpink>Avaliando o Corretor
"""

def avaliador(testes):
  numero_palavras = len(testes)
  acertou = 0
  for correta, errada in testes:
    palavra_corrigida = corretor(errada)
    if palavra_corrigida == correta:
      acertou += 1
  taxa_acerto = acertou/numero_palavras
  print(f'Taxa de acerto: {taxa_acerto*100:.2f}% de {numero_palavras} palavras')

avaliador(lista_teste)

"""---
---

# <font color=green>Aula 5 – Incrementando o Corretor

## <font color=blackpink>Implementando o Delete de Caracteres
"""

def deletando_caracter(fatias):
  novas_palavras = []
  for E, D in fatias:
    novas_palavras.append(E + D[1:])
  return novas_palavras

"""---

## <font color=blackpink>Avaliando o Novo Corretor
"""

gerador_palavras('lóigica')

corretor('lóigica')

def gerador_palavras(palavra):
  fatias = []
  for i in range(len(palavra) + 1):
    fatias.append((palavra[:i],palavra[i:]))
  palavras_geradas = insere_letras(fatias)
  palavras_geradas += deletando_caracter(fatias)
  return palavras_geradas


palavras_geradas = gerador_palavras('lóigica')
palavras_geradas

avaliador(lista_teste)

corretor('palavrra')